%SORTS
  Prop
| Type
%AXIOMS
  Prop : Type
%RULES
  Prop,Prop,Prop
| Prop,Type,Type
| Type,Prop,Prop
| Type,Type,Type


let โค : Prop = โ (A : Prop) A โ A
let ๐ = โค
let tt : โค = ฮป(_ x) x
let id = tt

let โฅ : Prop = โ (A : Prop) A
let โฅ-elim : โฅ โ โ (A : Prop) A = ฮป(f) f

let ยฌ : Prop โ Prop = ฮป(p) p โ โฅ

let โง : Prop โ Prop โ Prop =
ฮป(A B) โ (C : Prop) (A โ B โ C) โ C

let pair : โ (A B : Prop) A โ B โ โง A B =
ฮป(_ _ x y) ฮป(_ elim) elim x y

let ฯโ : โ (A B : Prop) โง A B โ A =
ฮป(A B p) p A (ฮป(x y) x)

let ฯโ : โ (A B : Prop) โง A B โ B =
ฮป(A B p) p B (ฮป(x y) y)


let โจ : Prop โ Prop โ Prop =
ฮป(A B) โ (C : Prop) (A โ C) โ (B โ C) โ C

let injโ : โ (A B : Prop) A โ โจ A B =
ฮป(_ _ a _ l r) l a

let injโ : โ (A B : Prop) B โ โจ A B =
ฮป(_ _ b _ l r) r b

let case : โ (A B : Prop) โจ A B โ โ (C : Prop) (A โ C) โ (B โ C) โ C =
ฮป(_ _ x) x


let ฮฃ : โ (A : Prop) (A โ Prop) โ Prop =
ฮป(A P) โ (C : Prop) (โ (x : A) P x โ C) โ C

let exists : โ (A : Prop) (P : A โ Prop) (x : A) P x โ ฮฃ A P =
ฮป(_ _ x p _ elim) elim x p

let โก : โ (A : Prop) A โ A โ Prop =
ฮป(A x y) โ (P : A โ Prop) P x โ P y

let refl : โ (A : Prop) (x : A) โก A x x =
ฮป(_ _ _ Px) Px

let sym : โ (A : Prop) (x y : A) โก A x y โ โก A y x =
ฮป(A x y xโกy P) xโกy (ฮป(w) P w โ P x) (refl A x P)

let trans : โ (A : Prop) (x y z : A) โก A x y โ โก A y z โ โก A x z =
ฮป(A x y z xโกy yโกz P Px) yโกz P (xโกy P Px)

let โ : Prop โ Prop โ Prop =
ฮป(A B)
  ฮฃ (A โ B) ฮป(aโb)
  ฮฃ (B โ A) ฮป(bโa)
  โง (โ (a : A) โก A (bโa (aโb a)) a) (โ (b : B) โก B (aโb (bโa b)) b)  

let โ : Prop โ Prop โ Prop =
ฮป(A B) โง (A โ B) (B โ A)

let ๐น : Prop = โจ โค โค
let true  : ๐น = injโ โค โค tt
let false : ๐น = injโ โค โค tt

let if : ๐น โ โ (A : Prop) A โ A โ A =
ฮป(b A t f) case โค โค b A (ฮป(_) t) (ฮป(_) f)

let ๐น : Prop = โ (A : Prop) A โ A โ A
let true  : ๐น = ฮป(_ x y) x
let false : ๐น = ฮป(_ x y) y

let if : ๐น โ โ (A : Prop) A โ A โ A =
ฮป(x) x

let && : ๐น โ ๐น โ ๐น =
ฮป(b1 b2) if b1 ๐น (if b2 ๐น true false) false

let || : ๐น โ ๐น โ ๐น =
ฮป(b1 b2) if b1 ๐น true (if b2 ๐น true false)

let โ : Prop = โ (A : Prop) (A โ A) โ A โ A
let Z : โ = ฮป(_ _ x) x
let S : โ โ โ = ฮป(n A f x) f (n A f x)
let 0 : โ = Z
let 1 : โ = S 0
let 2 : โ = S 1
let 3 : โ = S 2
let 4 : โ = S 3
let 5 : โ = S 4
let 6 : โ = S 5
let 7 : โ = S 6
let 8 : โ = S 7
let 9 : โ = S 8

let โ-elim : โ โ โ (A : Prop) (A โ A) โ A โ A = ฮป(x) x

let pred : โ โ โ =
ฮป(n) ฯโ โ โ
     (โ-elim n (โง โ โ)
       (ฮป(p) pair โ โ (ฯโ โ โ p) (S (ฯโ โ โ p)))
       (pair โ โ 0 0))

let + : โ โ โ โ โ =
ฮป(m n) โ-elim m โ S n

let - : โ โ โ โ โ =
ฮป(m n) โ-elim n โ pred m

let * : โ โ โ โ โ =
ฮป(m n) โ-elim m โ (+ n) 0

let ^ : โ โ โ โ โ =
ฮป(m n) โ-elim n โ (* m) 1

let zero? : โ โ ๐น =
ฮป(n) โ-elim n ๐น (ฮป(_) false) true

let zero?-correct : โ (n : โ) โก โ 0 n โ โก ๐น true (zero? n) =
ฮป(n 0โกn) 0โกn (ฮป(x) โก ๐น true (zero? x)) (refl ๐น true)

let โคแต : โ โ โ โ ๐น =
ฮป(m n) zero? (- m n)

let โฅแต : โ โ โ โ ๐น =
ฮป(m n) โคแต n m

let <แต : โ โ โ โ ๐น =
ฮป(m n) if (&& (zero? m) (zero? n)) ๐น false (โคแต m (pred n))

let >แต : โ โ โ โ ๐น =
ฮป(m n) <แต n m

let 1+1โก2 : โก โ (+ 1 1) 2 = refl โ 2

let 2*3โก6 : โก โ (* 2 3) 6 = refl โ 6

let 3^2โก9 : โก โ (^ 3 2) 9 = refl โ 9

let 4<แต5 : โก ๐น (<แต 4 5) true = refl ๐น true

let โ-โ : โ (n : โ) ฮฃ โ ฮป(m) โก โ (+ n 1) m =
ฮป(n) ฮป(_ elim) elim (+ n 1) (refl โ (+ n 1)) 

let โค : โ โ โ โ Prop =
ฮป(x y) โ (C : โ โ โ โ Prop) (โ (n : โ) C 0 n) โ (โ (m n : โ) C m n โ C (S m) (S n)) โ C x y

let ZโคZ : โ (n : โ) โค 0 n =
ฮป(n C b h) b n

let SโคS : โ (x y : โ) โค x y โ โค (S x) (S y) =
ฮป(x y mโคn C b h) h x y (mโคn C b h)


let List : Prop โ Prop =
ฮป(A) โ (B : Prop) (A โ B โ B) โ B โ B

let [] : โ (A : Prop) List A =
ฮป(A B g z) z

let โท : โ (A : Prop) A โ List A โ List A =
ฮป(A x xs) ฮป(B g z) g x (xs B g z)

let foldr : โ (A : Prop) List A โ โ (B : Prop) (A โ B โ B) โ B โ B =
ฮป(_ x) x

let map : โ (A B : Prop) (A โ B) โ List A โ List B =
ฮป(A B f xs) xs (List B) (ฮป(x xs) โท B (f x) xs) ([] B)


let xs : List โ = โท โ 0 (โท โ 1 (โท โ 2 ([] โ)))

let Maybe : Prop โ Prop =
ฮป(A) โจ A ๐

let Some : โ(A : Prop) A โ Maybe A = ฮป(A) injโ A ๐
let None : โ(A : Prop) Maybe A = ฮป(A) injโ A ๐ tt

let _ : Maybe (List โ) = None (List โ)
let _ : Maybe (List โ) = Some (List โ) (โท โ 1 ([] โ))

let hd : โ (A : Prop) List A โ Maybe A =
ฮป(A xs) foldr A xs (Maybe A) (ฮป(x xs) Some A x) (None A)

let Vec : Prop โ โ โ Prop =
ฮป(A n) โ (B : โ โ Prop) (โ (m : โ) A โ B m โ B (S m)) โ B 0 โ B n 

let <> : โ (A : Prop) Vec A 0 =
ฮป(A) ฮป(B g z) z

let vcons : โ (A : Prop)(n : โ) A โ Vec A n โ Vec A (S n) =
ฮป(A n x xs) ฮป(B g z) g n x (xs B g z)

let โ : (Prop โ Prop) โ Prop =
ฮป(P) โ (C : Prop) (โ (t : Prop) P t โ C) โ C

let pack : โ (t : Prop) (P : Prop โ Prop) P t โ โ P =
ฮป(t P imp) ฮป(C f) f t imp

let unpack : โ (P : Prop โ Prop) โ P โ โ (C : Prop) (โ (t : Prop) P t โ C) โ C =
ฮป(P x) x

let MONOID : Prop โ Prop = ฮป(M) โง M (M โ M โ M)

let M/* : โ (M : Prop) MONOID M โ M โ M โ M =
ฮป(M C) ฯโ M (M โ M โ M) C

let M/unit : โ (M : Prop) MONOID M โ M =
ฮป(M C) ฯโ M (M โ M โ M) C

let M/mk : โ (M : Prop) M โ (M โ M โ M) โ MONOID M =
ฮป(M unit *) pair M (M โ M โ M) unit *


let MONOID-VERIFIED : Prop โ Prop =
ฮป(M)
  ฮฃ M ฮป(unit)
  ฮฃ (M โ M โ M) ฮป(*)
  โง
    (โง
      (โ (a : M) โก M (* unit a) a)
      (โ (a : M) โก M (* a unit) a))
    (โ (a b c : M) โก M (* a (* b c)) (* (* a b) c))

let Monoid-โ-+ : MONOID โ =
M/mk โ 0 +

let Monoid-โ-* : MONOID โ =
M/mk โ 1 *

let f : โ (M : Prop)  MONOID M โ M =
ฮป(M C) M/* M C (M/unit M C) (M/unit M C)

let foldMap : โ (A M : Prop) MONOID M โ (A โ M) โ List A โ M =
ฮป(A M C f xs) (map A M f xs) M (M/* M C) (M/unit M C)

let sum : List โ โ โ = foldMap โ โ Monoid-โ-+ (id โ)
let prod : List โ โ โ = foldMap โ โ Monoid-โ-* (id โ)

let xs = โท โ 1 (โท โ 2 (โท โ 3 (โท โ 4 ([] โ))))


let EM : Prop = โ (A : Prop) โจ A (ยฌ A)
let DNE : Prop = โ (A : Prop) ยฌ (ยฌ A) โ A

let EMโDNE : EM โ DNE = 
ฮป(em A ยฌยฌA) (em A) A (ฮป(a) a) (ฮป(ยฌa) (ยฌยฌA ยฌa) A)

let DNEโEM : DNE โ EM =
ฮป(dne A) ฮป(C aโc ยฌaโc) dne C (ฮป(ยฌc) ยฌc (ยฌaโc ฮป(a) ยฌc (aโc a)))


